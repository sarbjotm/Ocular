{"version":3,"sources":["js/prereq-tree/helper.js","js/prereq-tree/Tree.js","js/App.js","js/reportWebVitals.js","index.js"],"names":["fetchPrereqFromHTML","term","year","subject","code","a","prereqLine","fetch","toUpperCase","response","json","data","console","error","Tree","useState","setTerm","setYear","setSubject","setCode","treeData","setTreeData","isLoading","setIsLoading","loadPrereqTree","searchedCourse","courseToBeSearched","connection","baseCourses","forEach","baseCourse","includes","push","replace","course","split","toLowerCase","indexOf","filter","c","length","useEffect","className","value","onChange","e","target","selected","type","min","max","step","onClick","_event","Graphviz","dot","App","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.66cfcefa.chunk.js","sourcesContent":["export async function fetchPrereqFromHTML(term, year, subject, code) {\r\n    var prereqLine = \"\";\r\n\r\n    try {\r\n        const response = await fetch(`/courses/info/${subject.toUpperCase()}/${code.toUpperCase()}`);\r\n        // console.log(response);\r\n        const data = await response.json();\r\n        // console.log(data);\r\n        prereqLine = data[\"prerequisite\"];\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n\r\n    return prereqLine;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { fetchPrereqFromHTML } from \"./helper\";\r\n\r\nimport { Graphviz } from 'graphviz-react';\r\n\r\nimport baseCourses from \"../../json/base-courses.json\";\r\n\r\nexport const Tree = () => {\r\n    const [term, setTerm] = useState(\"fall\");\r\n    const [year, setYear] = useState(\"2021\");\r\n    const [subject, setSubject] = useState(\"cmpt\");\r\n    const [code, setCode] = useState(\"470\");\r\n    const [treeData, setTreeData] = useState(\"\");\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    async function loadPrereqTree() {\r\n        setIsLoading(true);\r\n\r\n        var searchedCourse = [];\r\n        var courseToBeSearched = [];\r\n        var connection = \"\";\r\n\r\n        const prereqLine = await fetchPrereqFromHTML(term, year, subject, code);\r\n        baseCourses[\"COURSE_CODE\"].forEach(baseCourse => {\r\n            if (prereqLine.includes(baseCourse)) { // add all prereq courses into search queue\r\n                courseToBeSearched.push(baseCourse);\r\n                connection += `${subject.toUpperCase()}${code.toUpperCase()} -> ${baseCourse.replace(/\\s/g, \"\")};\\n`; // whitespace between subject and code needs to be removed before plotting\r\n            }\r\n        });\r\n\r\n        searchedCourse.push(`${subject.toUpperCase()} ${code.toUpperCase()}`);\r\n        // console.log(\"courseToBeSearched\", courseToBeSearched);\r\n        // console.log(\"searchedCourse\", searchedCourse);\r\n\r\n        while (courseToBeSearched.length) {\r\n            let course = courseToBeSearched[0];\r\n            const prereqLine = await fetchPrereqFromHTML(term, year, course.split(\" \")[0].toLowerCase(), course.split(\" \")[1].toLowerCase());\r\n            baseCourses[\"COURSE_CODE\"].forEach(baseCourse => {\r\n                if (prereqLine.includes(baseCourse) && searchedCourse.indexOf(baseCourse) === -1) { // add all prereq courses that haven't been searched into search queue\r\n                    courseToBeSearched.push(baseCourse);\r\n                    connection += `${course.replace(/\\s/g, \"\")} -> ${baseCourse.replace(/\\s/g, \"\")};\\n`; // whitespace between subject and code needs to be removed before plotting\r\n                }\r\n            });\r\n\r\n            searchedCourse.push(course);\r\n            courseToBeSearched = courseToBeSearched.filter(c => c !== course);\r\n            // console.log(\"courseToBeSearched\", courseToBeSearched);\r\n            // console.log(\"searchedCourse\", searchedCourse);\r\n        }\r\n\r\n        // console.log(connection);\r\n        let data = `digraph {${connection}}`;\r\n        setTreeData(data);\r\n        setIsLoading(false);\r\n    }\r\n\r\n    useEffect(async () => {\r\n        loadPrereqTree();\r\n    }, []);\r\n\r\n    function handleSubmit(_event) {\r\n        loadPrereqTree();\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <div>\r\n                <div className=\"ui two column stackable grid\">\r\n                    <div className=\"column\">\r\n                        <div className=\"ui center aligned container\">\r\n                            <p>\r\n                                <b>Term: </b>\r\n                                <select className=\"ui selection dropdown\" value={term} onChange={(e) => setTerm(e.target.value.toLowerCase())}>\r\n                                    <option selected value=\"spring\">spring</option>\r\n                                    <option value=\"summer\">summer</option>\r\n                                    <option value=\"fall\">fall</option>\r\n                                </select>\r\n                            </p>\r\n                            <p>\r\n                                <b>Year: </b>\r\n                                <div className=\"ui input\">\r\n                                    <input type=\"text\" value={year} onChange={(e) => setYear(e.target.value.toLowerCase())} min=\"2019\" max=\"2022\" step=\"1\" />\r\n                                </div>\r\n                            </p>\r\n                            <p>\r\n                                <b>Subject: </b>\r\n                                <select className=\"ui selection dropdown\" value={subject} onChange={e => setSubject(e.target.value.toLowerCase())}>\r\n                                    <option selected value=\"cmpt\">CMPT</option>\r\n                                    <option value=\"macm\">MACM</option>\r\n                                </select>\r\n                            </p>\r\n                            <p>\r\n                                <b>Course Number: </b>\r\n                                <div className=\"ui input\">\r\n                                    <input className=\"ui input\" type=\"text\" value={code} onChange={(e) => setCode(e.target.value.toLowerCase())} />\r\n                                </div>\r\n                            </p>\r\n                            <button className=\"ui inverted red button\" onClick={handleSubmit}>Make a tree</button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"middle aligned column\">\r\n                    {isLoading ? \"Loading...\" : <Graphviz dot={treeData} />}\r\n                    </div>\r\n                </div>\r\n                <div className=\"ui vertical divider\" />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport '../css/App.css';\r\n\r\nimport { Tree } from './prereq-tree/Tree';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <div className=\"App-header\">\r\n        <a href=\"/calendar\" className=\"ui button\">Calendar</a>\r\n        <a href=\"/courses\" className=\"ui button\">All Courses</a>\r\n        <a href=\"/planner/\" className=\"ui button\">Course Tree</a>\r\n        <a href=\"/enrollment\" className=\"ui button\">Enrollment</a>\r\n      </div>\r\n      <div className=\"App\">\r\n        <h1>Course Tree</h1>\r\n        <div className=\"view\"><Tree /></div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './js/App';\r\nimport reportWebVitals from './js/reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}