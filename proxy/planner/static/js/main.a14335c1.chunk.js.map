{"version":3,"sources":["js/prereq-tree/helper.js","js/prereq-tree/Tree.js","js/enrollment/helper.js","js/enrollment/Enrolment.js","js/App.js","js/reportWebVitals.js","index.js"],"names":["fetchPrereqFromHTML","term","year","subject","code","a","prereqLine","fetch","toUpperCase","response","json","data","console","error","Tree","useState","setTerm","setYear","setSubject","setCode","treeData","setTreeData","isLoading","setIsLoading","loadPrereqTree","searchedCourse","courseToBeSearched","connection","baseCourses","forEach","baseCourse","includes","push","replace","course","split","toLowerCase","indexOf","filter","c","length","useEffect","value","onChange","e","target","selected","type","min","max","step","onClick","_event","Graphviz","dot","checkPrereqBeforeEnrolment","Enrolment","enrollingCourse","setEnrollingCourse","log","event","disabled","hidden","map","App","view","setView","className","viewComponent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a14335c1.chunk.js","sourcesContent":["export async function fetchPrereqFromHTML(term, year, subject, code) {\r\n    var prereqLine = \"\";\r\n\r\n    try {\r\n        const response = await fetch(`/courses/info/${subject.toUpperCase()}/${code.toUpperCase()}`);\r\n        // console.log(response);\r\n        const data = await response.json();\r\n        // console.log(data);\r\n        prereqLine = data[\"prerequisite\"];\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n\r\n    return prereqLine;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { fetchPrereqFromHTML } from \"./helper\";\r\n\r\nimport { Graphviz } from 'graphviz-react';\r\n\r\nimport baseCourses from \"../../json/base-courses.json\";\r\n\r\nexport const Tree = () => {\r\n    const [term, setTerm] = useState(\"fall\");\r\n    const [year, setYear] = useState(\"2021\");\r\n    const [subject, setSubject] = useState(\"cmpt\");\r\n    const [code, setCode] = useState(\"470\");\r\n    const [treeData, setTreeData] = useState(\"\");\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    async function loadPrereqTree() {\r\n        setIsLoading(true);\r\n\r\n        var searchedCourse = [];\r\n        var courseToBeSearched = [];\r\n        var connection = \"\";\r\n\r\n        const prereqLine = await fetchPrereqFromHTML(term, year, subject, code);\r\n        baseCourses[\"COURSE_CODE\"].forEach(baseCourse => {\r\n            if (prereqLine.includes(baseCourse)) { // add all prereq courses into search queue\r\n                courseToBeSearched.push(baseCourse);\r\n                connection += `${subject.toUpperCase()}${code.toUpperCase()} -> ${baseCourse.replace(/\\s/g, \"\")};\\n`; // whitespace between subject and code needs to be removed before plotting\r\n            }\r\n        });\r\n\r\n        searchedCourse.push(`${subject.toUpperCase()} ${code.toUpperCase()}`);\r\n        // console.log(\"courseToBeSearched\", courseToBeSearched);\r\n        // console.log(\"searchedCourse\", searchedCourse);\r\n\r\n        while (courseToBeSearched.length) {\r\n            let course = courseToBeSearched[0];\r\n            const prereqLine = await fetchPrereqFromHTML(term, year, course.split(\" \")[0].toLowerCase(), course.split(\" \")[1].toLowerCase());\r\n            baseCourses[\"COURSE_CODE\"].forEach(baseCourse => {\r\n                if (prereqLine.includes(baseCourse) && searchedCourse.indexOf(baseCourse) === -1) { // add all prereq courses that haven't been searched into search queue\r\n                    courseToBeSearched.push(baseCourse);\r\n                    connection += `${course.replace(/\\s/g, \"\")} -> ${baseCourse.replace(/\\s/g, \"\")};\\n`; // whitespace between subject and code needs to be removed before plotting\r\n                }\r\n            });\r\n\r\n            searchedCourse.push(course);\r\n            courseToBeSearched = courseToBeSearched.filter(c => c !== course);\r\n            // console.log(\"courseToBeSearched\", courseToBeSearched);\r\n            // console.log(\"searchedCourse\", searchedCourse);\r\n        }\r\n\r\n        // console.log(connection);\r\n        let data = `digraph {${connection}}`;\r\n        setTreeData(data);\r\n        setIsLoading(false);\r\n    }\r\n\r\n    useEffect(async () => {\r\n        loadPrereqTree();\r\n    }, []);\r\n\r\n    function handleSubmit(_event) {\r\n        loadPrereqTree();\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <label>\r\n                <b>Term: </b>\r\n                <select value={term} onChange={(e) => setTerm(e.target.value.toLowerCase())}>\r\n                    <option selected value=\"spring\">spring</option>\r\n                    <option value=\"summer\">summer</option>\r\n                    <option value=\"fall\">fall</option>\r\n                </select>\r\n            </label>\r\n            <label>\r\n                <b>Year: </b>\r\n                <input type=\"text\" value={year} onChange={(e) => setYear(e.target.value.toLowerCase())} min=\"2019\" max=\"2022\" step=\"1\" />\r\n            </label>\r\n            <label>\r\n                <b>Subject: </b>\r\n                <select value={subject} onChange={e => setSubject(e.target.value.toLowerCase())}>\r\n                    <option selected value=\"cmpt\">CMPT</option>\r\n                    <option value=\"macm\">MACM</option>\r\n                </select>\r\n            </label>\r\n            <label>\r\n                <b>Course Number: </b>\r\n                <input type=\"text\" value={code} onChange={(e) => setCode(e.target.value.toLowerCase())} />\r\n            </label>\r\n            <button onClick={handleSubmit}>Make a tree</button>\r\n            {isLoading ? \"Loading...\" : <Graphviz dot={treeData} />}\r\n        </>\r\n    );\r\n};\r\n","import {fetchPrereqFromHTML} from \"../prereq-tree/helper\";\r\n\r\nexport async function checkPrereqBeforeEnrolment(course) {\r\n    const term = \"fall\";\r\n    const year = \"2021\";\r\n    const subject = course.split(\" \")[0].toLowerCase();\r\n    const code = course.split(\" \")[1].toLowerCase();\r\n\r\n    const prereqLine = await fetchPrereqFromHTML(term, year, subject, code);\r\n    /*\r\n        > Check if a current user database exists\r\n            > if no -> throw error and break ; else continue\r\n        > Grab course and check if user has all prerequisites\r\n            -> if yes -> return true ; else return false\r\n    */\r\n\r\n    //  For now just returning true \r\n    return true;\r\n}\r\n\r\nexport function enrollInto(course) {\r\n    /*\r\n        > Update the user database\r\n    */\r\n}\r\n","import React, {useState} from \"react\";\r\nimport {checkPrereqBeforeEnrolment} from \"./helper\";\r\nimport baseCourses from \"../../json/base-courses.json\";\r\n\r\nexport const Enrolment = () => {\r\n    const [enrollingCourse, setEnrollingCourse] = useState(\"CMPT 470\");\r\n\r\n    async function handleSubmit(_event) {\r\n        const checkPass = await checkPrereqBeforeEnrolment(enrollingCourse);\r\n\r\n        if (checkPass) {\r\n            console.log(\"Enrolling into Course: \", enrollingCourse);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <label>\r\n                <b> Choose course to enroll: </b>\r\n                <select onChange={(event) => setEnrollingCourse(event.target.value)}>\r\n                    <option value=\"\" disabled selected hidden> Select course to enroll </option>\r\n                    {\r\n                        baseCourses[\"COURSE_CODE\"].map( course => {\r\n                            return (<option value={course}>{course}</option>);\r\n                        })\r\n                    }\r\n                </select>\r\n                <button onClick={handleSubmit}> Enroll </button>\r\n            </label>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport '../css/App.css';\r\n\r\nimport { Tree } from './prereq-tree/Tree';\r\nimport { Enrolment } from './enrollment/Enrolment';\r\n\r\nfunction App() {\r\n  const [view, setView] = useState(\"tree\");\r\n\r\n  const headerComponent = () => {\r\n    return (\r\n      <>\r\n        <button onClick={() => {setView(\"tree\")}}>Prerequisite Tree</button>\r\n        <button onClick={() => {setView(\"enrolment\")}}>Enrolment</button>\r\n      </>\r\n    );\r\n  }\r\n\r\n  const viewComponent = () => {\r\n    switch(view) {\r\n      case \"tree\":\r\n        return <Tree />;\r\n      case \"enrolment\":\r\n        return <Enrolment />;\r\n      default:\r\n        return <Tree />;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"header\">{headerComponent()}</div>\r\n      <br/>\r\n      <div className=\"view\">{viewComponent()}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './js/App';\r\nimport reportWebVitals from './js/reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}